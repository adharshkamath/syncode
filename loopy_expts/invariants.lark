// term: "sizeof" "(" c_type_expr ")"                              -> sizeof_type

string: /\S+/                                                   -> string

literal: "\true"                                                -> true 
    | "\false"                                                  -> false
    | /[0-9]+/                                                  -> integer
    | /[0-9]+\.[0-9]+/                                          -> real
    | string                                                    -> string
    | /\S/                                                      -> char

id: /[a-zA-Z_][a-zA-Z0-9_]*/                                    -> id

bin_op: "+" | "-" | "*" | "/" | "%" | "&&" | "||" | "^^" 
    | ">>" | "<<" | "&" | "|" | "^" | "-->" | "<-->"

unary_op: "+" | "-" | "!" | "~" | "*" | "&"

ident: id

poly_id: id

logic_type_name: built_in_logic_type | id

built_in_logic_type: "boolean" | "integer" | "real"

type_name: logic_type_name | c_type_name

type_expr: logic_type_name | c_type_expr

c_type_expr: c_specifier_qualifier+  c_abstract_declarator?

c_type_name: c_declaration_specifier+

c_specifier_qualifier: c_type_specifier | c_type_qualifier

c_type_qualifier: "const" | "volatile"

c_type_specifier: "void" 
| "char"
| "short"
| "int"
| "long"
| "float"
| "double"
| "signed"
| "unsigned"
| ("struct" | "union" | "enum") ident
| ident

c_abstract_declarator: c_pointer 
| c_pointer c_direct_abstract_declarator 
| c_direct_abstract_declarator

c_pointer: ("*" c_type_qualifier*)+

c_direct_abstract_declarator: "(" c_abstract_declarator ")"
| c_direct_abstract_declarator? "[" CONSTANT_EXPRESSION "]"
| c_direct_abstract_declarator? "(" c_parameter_type_list? ")"

c_parameter_type_list: c_parameter_declaration ("," c_parameter_declaration)+

c_parameter_declaration: c_declaration_specifier+ c_declarator
| c_declaration_specifier+ c_abstract_declarator
| c_declaration_specifier+

c_declaration_specifier: c_type_specifier | c_type_qualifier

c_declarator: c_pointer? c_direct_declarator

c_direct_declarator: ident
| "(" c_declarator ")"
| c_direct_declarator "[" CONSTANT_EXPRESSION? "]"
| c_direct_declarator "(" c_parameter_type_list ")"
| c_direct_declarator "(" ident* ")"

CONSTANT_EXPRESSION: /[0-9]+/

term: literal | ident | unary_op term | term bin_op term 
    | term "[" term "]" -> array_index
    | "{" term "\with" "[" term "]" "=" term "}"                -> array_update
    | term "." id                                               -> field_access
    |  "{" term "\with" "." id "=" term "}"                     -> field_update
    | term "->" id                                              -> pointer_field_access
    | "(" type_expr ")" term                                    -> cast
    | ident "(" term ("," term)* ")"                            -> function_call
    | "(" term ")"                                              -> parenthesis
    | term "?" term ":" term                                        -> ternary
    | "\let" id "=" term ";" term                               -> let
    | "sizeof" "(" term ")"                                     -> sizeof
    | id ":" term                                               -> syntactic_naming
    | string ":" term                                           -> syntactic_naming_str


rel_op: "==" | "!=" | "<" | "<=" | ">" | ">="

pred:  "\true" | "\false" 
| term (rel_op term)+ 
| ident "(" term ("," term)* ")"
| "(" pred ")"
| pred "&&" pred
| pred "||" pred
| pred "==>" pred
| pred "<==>" pred
| "!" pred
| pred "^^" pred
| term "?" pred ":" pred
| pred "?" pred ":" pred
| "\let" id "=" term ";" pred
| "\let" id "=" pred ";" pred
| "\forall" binders ";" pred
| "\exists" binders ";" pred
| id ":" pred
| string ":" pred


binder: type_name variable_ident ("," variable_ident)*

binders: binder ("," binder)*


variable_ident: id
| "*" variable_ident
| variable_ident "[]"
| "(" variable_ident ")"

invariant: "loop invariant " pred ";"

invariants: invariant*

start: "/*@" invariants "*/"

WS: /[ \t\n]+/
%ignore WS
